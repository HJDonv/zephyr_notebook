使用CMAKE指令之后，会创建一系列的makefile，这里对这些makefile进行学习。
了解后续在build文件夹下执行make之后会发生的过程，希望能够总体去理解编译框架，
能理解多少就理解多少吧，一点点记录，这里编译了bluetooth的beacon例程。

2018/04/03 22：46
1、
# Remove some rules from gmake that .SUFFIXES does not remove.
SUFFIXES =

.SUFFIXES: .hpux_make_needs_suffix_list

这里的.hpux_make_needs_suffix_list是什么？在哪里？
这样.SUFFIXES相当于不支持任何后缀了？
2、
执行make，其实就是执行make all，其中make all是个多规则目标。所以我把all目标的全部依赖列了一遍。
all: CMakeFiles/app.dir/all
all: zephyr/CMakeFiles/zephyr.dir/all
all: zephyr/CMakeFiles/zephyr_prebuilt.dir/all
all: zephyr/CMakeFiles/offsets.dir/all
all: zephyr/CMakeFiles/kernel_elf.dir/all
all: zephyr/subsys/bluetooth/common/CMakeFiles/subsys__bluetooth__common.dir/all
all: zephyr/subsys/bluetooth/host/CMakeFiles/subsys__bluetooth__host.dir/all
all: zephyr/subsys/bluetooth/controller/CMakeFiles/subsys__bluetooth__controller.dir/all
all: zephyr/subsys/net/CMakeFiles/subsys__net.dir/all
all: zephyr/kernel/CMakeFiles/kernel.dir/all    

CMakeFiles/app.dir/all又有别的依赖，一层嵌套一层，但是最后会调用这两个语句
$(MAKE) -f zephyr/CMakeFiles/xxxx/build.make zephyr/CMakeFiles/xxxx/depend
$(MAKE) -f zephyr/CMakeFiles/xxxx/build.make zephyr/CMakeFiles/xxxx/build

make 在读入所有 makefile 文件之后，首先将所读取的每个 makefile 作为一个目标，试着去更新它。由于build.make中有明确的depend和build目标生成规则，而它们又是.PHONY，所以成功更新depend目标和build目标，其中depend目标的规则生成cmake使用的文件，不懂，暂时不看。
build目标规则会通过py，json等文件生成一系列后续要用的.c .h文件。

3、
# A target that is always out of date.
cmake_force:

.PHONY : cmake_force

这个目标放在作为哪个目标的依赖，只要make那个目标，一定会被重建，而不会出现up to date的情况。

2018.04.05 00:27
1、
在使用交叉编译工具链arm-zephyr-eabi-gcc把.c编译成.o文件时候，会用到ccache命令，百度：ccache是一个编译缓存，通过缓存以前的汇编和检测时再次执行相同的编译以加快重新编译。
2、
build/CMakeFiles里面有许多xxx.dir文件夹，里面有menuconfig生成规则，用户app的.o生成规则，反正都是一些系统外的第三方工具的东西。
build/zephyr/CMakiles里面有许多xxx.dir文件夹，里面有许多和zephyr系统相关的.o文件生成规则。
3、
cmake -E env [--unset=NAME]... [NAME=VALUE]... COMMAND [ARG]...
这条指令让COMMAND能够在指令指定的环境中运行，但是这种环境只在第一次使用生效，网页上描述的几个操作都会导致环境变量刷新。不是很懂。
https://stackoverflow.com/questions/690223/how-to-retrieve-a-user-environment-variable-in-cmake-windows

2018.04.05 13:19
1、
all: zephyr/CMakeFiles/zephyr.dir/all的规则应该会生成一堆的.c.obj文件，但是最后结果是没有的，可能在后续哪个步骤删掉了。
追加1：之前的认知是错误的，理解错误原因是makefile中的目标不等于文件，并没有删除的步骤，而是根本没有生成。
2、
使用script来记录终端信息，查看一下执行make的过程，找找看是在哪里删掉这些文件的。使用script进行log，会包含很多转义字符，看起来不方便，参考以下方法解决：
https://stackoverflow.com/questions/6306728/remove-ansi-codes-when-storing-script-output

2018.04.05 00:20
1、
make操作之后的log里面会有许多：
Scanning dependencies of target xxxx
Built target xxxx
但是这两行都没在makefile中找到，可能是cmake内部打印的。

2018.04.07 23:43
1、
这两天了解了CMAKE基本语法，并不是很难，makefile是根据zephyr团队写的CMAKE脚本自动生成的，所以打算先把makefile放一放，先学习CMAKE。（感觉makefile不用看，因为是根据CMAKE框架自动生成的）

2、
target链接库的时候，有两个命令：
LINK_LIBRARIES() :这个命令要注意必须放在ADD_EXECUTABLE前面。
TARGET_LINK_LIBRARIES()

3、
CMAKE学习路线参考了以下网址：https://www.kancloud.cn/itfanr/cmake-practice/82988

4、
对于*_SOURCE_DIR和*_BINARY_DIR这些变量的具体意义，参考以下链接：
johnnado.com/cmake-directory-variables
或者官方文档。可以使用MESSAGE指令打印出来感受一下。

2018.04.08 22:55
1、
CMAKE里面存在许多类（GLOBAL、DIRECTROY、TARGET...)，每个类有对应的属性。
因为对象属于对应的类，所以对象有对应类的各种标准属性（PROPERTY），通过CMAKE的set_property和get_property命令
可以对设置和获取这些属性值。其中GLOBAL类没有对象。
在boilerplate.cmake文件中一开始便在GLOBAL中定义了许多PROPERTY，通过这个类可以模拟全局变量的作用，所以后面一定在某个地方使用到这些全局变量。

2、
extensions.cmake中定义了一些函数，看上去以后修改app最顶层的CMakeLists会用到。
target_include_directories的具体用法参考：
https://stackoverflow.com/questions/26243169/cmake-target-include-directories-meaning-of-scope
target_link_libraries的具体用法参考：
https://stackoverflow.com/questions/26037954/cmake-target-link-libraries-interface-dependencies
结果上述两种的具体用法参考：
https://stackoverflow.com/questions/31969547/what-is-the-difference-between-include-directories-and-target-include-directorie

2018.04.10 23:04
1、
对于lib和include在编译过程中的作用不是很清晰，上网多看看。
下面是预处理时候，搜索include文件的顺序：
https://gcc.gnu.org/onlinedocs/gcc/Directory-Options.html#Directory-Options
2、
CMAKE_CXX_FLAGS和COMPILE_DEFINITIONS区别，对某个target进行编译时候，会在哪里找编译选项
https://stackoverflow.com/questions/39501481/difference-between-add-compile-options-and-setcmake-cxx-flags
3、
objcect libraries不能被直接“link”到target，但是可以通过Interface libraries间接link过去，不是很懂，先留着。

2018.04.11 22:07
1、
使用静态库和直接使用源码的区别
https://segmentfault.com/q/1010000002982186

2018.04.12 21:56
1、
参考以下链接：
http://www.cnblogs.com/coderfenghc/archive/2012/06/25/2562778.html
CMD#13:cmake_policy  管理CMake的策略设置。
随着CMake的演变，有时为了搞定bug或改善现有特色的实现方法，改变现有的行为是必须的。CMake的策略机制是在新的CMake版本带来行为上的改变时，用来帮助保持现有项目的构建的一种设计。
每个新的策略（行为改变）被赋予一个"CMP<NNNN>"格式的识别符，其中"<NNNN>"是一个整数索引。每个策略相关的文档都会描述“旧行为”和“新行为”，以及引入该策略的原因。
工程可以设置各种策略来选择期望的行为。当CMake需要了解要用哪种行为的时候，它会检查由工程指定的一种设置。如果没有可用的设置，工程假定使用“旧行为”，并且会给出警告要求你设置工程的策略。

2、
ccache.cmake的作用
https://crascit.com/2016/04/09/using-ccache-with-cmake/

3、
variable的语法和用法
https://stackoverflow.com/questions/31037882/whats-the-cmake-syntax-to-set-and-use-variables

4、
关于${${...}}引用语法
macro(assert test comment)
  if(NOT ${test})
    message(STATUS "Assertion failed: ${${comment}}")
    message(STATUS "comment is : ${comment}")
  endif()
endmacro()

set(WARNNING_MESSAGE "ZEPHYR_TOOLCHAIN_VARIANT not set.")
assert(ZEPHYR_TOOLCHAIN_VARIANT WARNNING_MESSAGE)

上面这个例子，当美set test的时候，会打印出：
-- Assertion failed: ZEPHYR_TOOLCHAIN_VARIANT not set.
-- comment is : WARNNING_MESSAGE
也就是说
${comment} = WARNNING_MESSAGE
${WARNING_MESSAGE} = "ZEPHYR_TOOLCHAIN_VARIANT not set."

2018.04.14 00:25
1、
${ARGN}的作用：
https://www.cnblogs.com/guolixiucai/p/4681171.html

2、
boilerplate.cmake的include(${ZEPHYR_BASE}/cmake/kconfig.cmake)应该生成并引用了
build/zephyr/.config里面的变量（猜测，验证一下）

 
2018.04.15 18：18

1、
总的来说，调用include(${ZEPHYR_BASE}/cmake/kconfig.cmake)做了几件事情：

（1）将以下两个对象
${KCONFIG_ROOT}           //即Kconfig文件，包含所有配置项
${merge_fragments}        //即所有.conf结尾的配置文件，包含配置项的值
作为参数传递给kconfig.py脚本生成
${PROJECT_BINARY_DIR}/.config
${PROJECT_BINARY_DIR}/include/generated/autoconf.h
由于${merge_fragments}有很多文件，涉及到参数覆盖和优先级的问题，参考以下链接：
参数覆盖：https://github.com/ulfalizer/Kconfiglib/blob/master/examples/merge_config.py
优先级：http://docs.zephyrproject.org/application/application.html#application-configuration
（2）制作几个自定义目标的运行环境（就像是制作了makefile中的为目标）：
  gconfig
  menuconfig
  oldconfig
  xconfig
  在以后进行make menuconfig修改完.config之后，就会生成新的.config
  参考
  http://www.leoox.com/?p=291
  https://blog.csdn.net/qqliyunpeng/article/details/50858075(autoconf.h如何生成的)

2、
总的来说，调用include(${ZEPHYR_BASE}/cmake/host-tools.cmake)做了几件事情：
(1)调用include(${ZEPHYR_BASE}/cmake/host-tools-zephyr.cmake)
   a.判断zephyr的SDK包是否是最新的
   b.将SDK包中的TOOLCHAIN路径赋值给CMAKE_PREFIX_PATH
(2)调用find_program在CMAKE_PREFIX_PATH路径中寻找执行程序，找到后将路径分别赋值给CACHE实体：
DTC
KCONFIG_CONF
KCONFIG_MCONF
OPENOCD

3、
cmake语法：
1、区分变量名字、变量、变量的值
https://cmake.org/Wiki/CMake/Language_Syntax的When CMake wants a variable name, when it wants a substitution章节

4、
环境变量
https://stackoverflow.com/questions/21047399/cmake-set-environment-variables-from-a-script
https://cmake.org/pipermail/cmake/2008-July/022655.html


2018.05.28 22:51
1、
CMAKE_CONFIGURE_DEPENDS这个property改变会导致所有CMakelist.txt重新执行一次。

2018.05.29 20:18
1、make menuconfig

1）使用make menuconfig之后会执行build/CMakeFiles/menuconfig.dir/build.make
cd /home/dong/zephyr/samples/bluetooth/beacon/build/zephyr/kconfig && 
   /home/dong/cmake/cmake-3.8.2-Linux-x86_64/bin/cmake -E env 
   srctree=/home/dong/zephyr 
   KERNELVERSION=1.11.99 
   KCONFIG_CONFIG=/home/dong/zephyr/samples/bluetooth/beacon/build/zephyr/.config 
   ENV_VAR_ARCH=arm 
   ENV_VAR_BOARD_DIR=/home/dong/zephyr/boards/arm/nrf52_pca10040 
   /home/dong/sysroots/x86_64-pokysdk-linux/usr/bin/mconf /home/dong/zephyr/Kconfig
先设置环境变量，然后执行mconff读取/home/dong/zephyr/Kconfig
2）
将刚刚赋值的环境变量传给Kconfig。
config KERNELVERSION
	string
	option env="KERNELVERSION"

config ENV_VAR_SYM_BOARD_DIR
	string
	option env="ENV_VAR_BOARD_DIR"

config ENV_VAR_SYM_ARCH
	string
	option env="ENV_VAR_ARCH"


2、
https://cmake.org/pipermail/cmake/2006-July/010095.html
https://cmake.org/pipermail/cmake/2015-October/061765.html
偶然删掉.config文件之后，发现make和make menuconfig指令都会导致重新执行一次CMAKE，重新构建build。
为什么呢？最后发现，是因为目标cmake_check_build_system，具体这个目标的实现不太清楚，只知道修改某些
东西会引起重新执行CMAKE。
在"~/zephyr/cmake/kconfig.cmake"有如下命令：

# Force CMAKE configure when the configuration files changes.
foreach(merge_config_input ${merge_config_files} ${DOTCONFIG})
  set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${merge_config_input})
endforeach()

在CMAKE官网查了下CMAKE_CONFIGURE_DEPENDS的描述如下：

CMAKE_CONFIGURE_DEPENDS
Tell CMake about additional input files to the configuration process. If any named file is modified the build system will re-run CMake to re-configure the file and generate the build system again.

Specify files as a semicolon-separated list of paths. Relative paths are interpreted as relative to the current source directory.

可能就是因为这个CACHE包含了.config，所以删掉.config会引起重新执行cmake。


2018.06.02 补
1、对于target_include_directories和target_link_libraries的新认识
假设有如下程序：

add_libraries(a a.c)
target_include_directories(a PRIVATE patha_private)
target_include_directories(a INTERFACE patha_interface)
target_include_directories(a PUBLIC patha_public)

add_executable(b b.c)
target_link_libraries(b a)

那么在编译目标a的时候，会把patha_private和patha_public路径加进include搜索范围
而在编译目标b的时候，会把patha_interface和patha_public加进include搜索范围

target_link_libraries(b PRIVATE/PUBLIC/INTERFACE a)的区别看官网例子

刚好和target_include_directories是相反的，target_link_libraries用法如下：
“Usage requirements are propagated by reading the INTERFACE_ variants of target properties from 
dependencies and appending the values to the non-INTERFACE_ variants of the operand. 
For example, the INTERFACE_INCLUDE_DIRECTORIES of dependencies is read and 
appended to the INCLUDE_DIRECTORIES of the operand. ”

2018.06.03 12：04
1、动态加载和动态链接的区别
http://goclis.github.io/posts/2014/05/21/difference-between-dynamic-link-and-dynamic-load.html

2、imported target和interface target区别
https://stackoverflow.com/questions/36648375/what-are-the-differences-betw

3、再次学习.o .so .a文件，好像CMake的编译系统关键就是理解这些区别
https://blog.csdn.net/chlele0105/article/details/23691147

2018.06.06 23:02
1、
zephyr interface这个目标是在add_sub时候，在Zephyr根目录下CMakefile创建的
2、


2018.06.28 23：26
1、
应用角度去使用CMAKE，暂时不深究。

2、
想继续学习发现基础还是太弱，先系统学习GDB，发现一篇还不错的文章
https://www-zeuthen.desy.de/unix/unixguide/infohtml/gdb/Connecting.html#Connecting